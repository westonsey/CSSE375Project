plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'checkstyle'
    id "com.github.spotbugs" version "5.0.13"
    id 'jacoco'

}


javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.base' ]
}

apply plugin : "java"
ext {
    javaMainClass = "org.openjfx.Main"
}

application {
    mainClass = 'org.openjfx.Main'
    mainClassName = javaMainClass
}
group 'edu.rose-hulman.csse'
version '1.0'


checkstyle {
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml") 
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}



spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = false
    reportLevel = 'default'
    effort = 'default'
    visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
    omitVisitors = [ 'FindNonShortCircuit' ]
    reportsDir = file("$buildDir/reports/spotbugs")
    projectName = name
    release = version
    extraArgs = [ '-nested:false' ]
    jvmArgs = [ '-Duser.language=ja' ]
    maxHeapSize = '512m'
}

group 'edu.rose-hulman.csse'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1',
        'io.cucumber:cucumber-java:5.6.0',
        'io.cucumber:cucumber-junit:5.6.0',
        'io.cucumber:cucumber-picocontainer:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    // https://mvnrepository.com/artifact/org.easymock/easymock
    testImplementation 'org.easymock:easymock:4.2'
    testImplementation group: 'org.easymock', name: 'easymock', version: '4.2'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

test.finalizedBy(jacocoTestReport)
task codeCoverageInfo (dependsOn: jacocoTestReport) {
    ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
    doLast {
        println "Transforming source file."
        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
                false);
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://xml.org/sax/features/namespaces", false)

        def reportNode = parser.parse(srcFile)
        reportNode.children().each {
            if(it.name() == 'counter') {
                String type = it.@type
                float missed = it.@missed as float
                float covered = it.@covered as float
                float percentage = covered / (missed + covered) * 100
                println "Code Coverage[$type]: $percentage%"
            }
        }
    }
}
jacocoTestReport.finalizedBy(codeCoverageInfo)

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

configurations.matching {
    it.isCanBeResolved() && it.name.contains("cucumber")
}.configureEach {
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage.class, Usage.JAVA_RUNTIME))
        attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, project.objects.named(OperatingSystemFamily.class, "linux"))
        attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, project.objects.named(MachineArchitecture.class, "x86-64"))
    }
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty',
                    '--glue',
                    'integration',
                    'src/test/resources']
        }
    }
}

